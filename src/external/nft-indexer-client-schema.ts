/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/collection': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register a collection for indexing (idempotent). */
    post: operations['postCollection'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collection/{chain}/{contract}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get collection metadata and indexing status. */
    get: operations['getCollectionStatus'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    /** Probe if collection is tracked. */
    head: operations['headCollectionStatus'];
    patch?: never;
    trace?: never;
  };
  '/collection/{chain}/{contract}/tokens': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Enumerate token IDs for an ERC-721/legacy721 collection.
     * @description For ERC-1155 this may return an empty list unless token discovery is enabled.
     */
    get: operations['listTokens'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collection/{chain}/{contract}/snapshot': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Unified ownership snapshot at a block/time.
     * @description Returns a normalized view where **each token** has **holders[]** with balances.
     *     For ERC-721, holders has exactly one element with balance="1".
     *
     */
    get: operations['getSnapshot'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collection/{chain}/{contract}/snapshot.csv': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Download ownership snapshot as CSV
     * @description Returns a CSV (token,owner,amount,sinceblock,sincetime,acquired_as_sale) for the collection at the given block (or the latest indexed head if at_block is omitted). No pagination; always returns the full collection.
     *
     */
    get: operations['getSnapshotCsv'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collection/{chain}/{contract}/{token_id}/transfers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Transfer history for a token, optionally since last paid sale. */
    get: operations['listTokenTransfers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/collection/{chain}/{contract}/transfers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Search transfers with filters (supports continuity adjustments). */
    get: operations['getCollectionTransfers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/transfers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Global transfers by block for a chain */
    get: operations['getGlobalTransfers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Error: {
      error: string;
      message: string;
      request_id?: string;
    };
    CollectionMetadata: {
      chain?: number;
      contract?: string;
      /** @enum {string} */
      standard: 'erc721' | 'erc1155' | 'legacy721' | 'unknown';
      /** @description Name of legacy adapter if applicable (e.g., "cryptopunks"). */
      adapter?: string | null;
      total_supply?: number | null;
      indexed_since_block?: number;
      last_indexed_block: number;
      safe_head_block: number;
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds
       */
      last_event_time?: number | null;
      /**
       * @description High-level collection processing status.
       * @enum {string}
       */
      status:
        | 'NOT_INDEXED'
        | 'WAITING_FOR_SNAPSHOTTING'
        | 'SNAPSHOTTING'
        | 'ERROR_SNAPSHOTTING'
        | 'UNINDEXABLE'
        | 'LIVE_TAILING';
      metrics?: {
        /** @description safe_head_block - last_indexed_block (never negative). */
        lag_blocks?: number;
        /** @description Null unless you persist reference times; optional convenience metric. */
        lag_seconds?: number | null;
      };
      /** @description DynamoDB partition key (chain:contract) */
      partition: string;
    };
    TokensPage: {
      chain: number;
      contract: string;
      token_ids: string[];
      next_cursor?: string | null;
    };
    TransferEvent: {
      chain: number;
      contract: string;
      token_id: string;
      from: string;
      to: string;
      /** @description For ERC-1155; "1" for 721. */
      amount?: string;
      is_monetary_sale?: boolean | null;
      tx_hash: string;
      block_number: number;
      log_index: number;
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds
       */
      time: number | null;
      /** @description True if this transfer is considered the start of a new paid-sale epoch for TDH use cases. */
      sale_epoch_start?: boolean;
    };
    TransfersSearchResponse: {
      events: components['schemas']['TransferEvent'][];
      next_cursor?: string | null;
    };
    SnapshotHolder: {
      owner: string;
      /** @description Stringified integer. For ERC-721 this is always "1". */
      balance: string;
      since_block: number;
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds
       */
      since_time: number | null;
    };
    SnapshotToken: {
      token_id: string;
      holders: components['schemas']['SnapshotHolder'][];
      sale_epoch_start_block?: number | null;
      sale_epoch_tx?: string | null;
    };
    SnapshotResponse: {
      chain: number;
      contract: string;
      /** @enum {string} */
      standard: 'erc721' | 'erc1155' | 'legacy721' | 'unknown';
      at_block: number;
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds
       */
      at_time?: number | null;
      tokens: components['schemas']['SnapshotToken'][];
    };
    WebhookSubscription: {
      id: string;
      /** Format: uri */
      url: string;
      /** @description Returned only on create; HMAC secret for signing. */
      secret?: string;
      event_types: (
        | 'TransferIndexed'
        | 'OwnerChanged721'
        | 'HolderChanged1155'
        | 'SaleEpochStarted'
        | 'CollectionLagStatus'
        | 'CollectionRegistered'
        | 'CollectionStandardDetected'
      )[];
      filter?: {
        chains?: number[];
        contracts?: string[];
        token_ids?: string[];
      };
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds
       */
      created_at: number | null;
    };
    WebhookSubscriptionCreate: {
      /** Format: uri */
      url: string;
      event_types: (
        | 'TransferIndexed'
        | 'OwnerChanged721'
        | 'HolderChanged1155'
        | 'SaleEpochStarted'
        | 'CollectionLagStatus'
        | 'CollectionRegistered'
        | 'CollectionStandardDetected'
      )[];
      filter?: components['schemas']['WebhookSubscription']['filter'];
    };
    EventEnvelope: {
      type: string;
      /**
       * Format: int64
       * @description Unix timestamp in milliseconds
       */
      time: number | null;
      data?: {
        [key: string]: unknown;
      };
    };
  };
  responses: {
    /** @description Unauthorized */
    Unauthorized: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
    /** @description Not found */
    NotFound: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
  };
  parameters: {
    /** @description EVM chain id (e.g., 1 for mainnet). */
    ChainParam: number;
    /** @description Contract address (EIP-55 or lowercased). */
    ContractParam: string;
    /** @description Token id (decimal or hex string). */
    TokenIdParam: string;
    /** @description Comma-separated token ids to include. Omit to enumerate via /collection/tokens first. */
    TokenIdsQuery: string;
    /** @description Snapshot at this block (recommended). Mutually exclusive with at_time. */
    AtBlockQuery: number;
    /** @description Snapshot at/before this ISO8601 time. Mutually exclusive with at_block. */
    AtTimeQuery: number;
    FromBlockQuery: number;
    ToBlockQuery: number;
    LimitQuery: number;
    CursorQuery: string;
    /** @description Comma-separated `from` addresses to match. */
    FromAddrsQuery: string;
    /** @description Comma-separated `to` addresses to match. */
    ToAddrsQuery: string;
    /** @description Filter by monetary sale flag if known. */
    MonetaryQuery: boolean;
    /** @description Sort field for results. */
    OrderByQuery: 'timestamp';
    /** @description Sort order for results. */
    OrderQuery: 'asc' | 'desc';
  };
  requestBodies: never;
  headers: {
    /** @description Correlation ID for tracing. */
    'X-Request-Id': string;
    /** @description HMAC SHA-256 signature of the raw request body using the webhook secret. Format `sha256=HEX`. */
    'X-Indexer-Signature': string;
  };
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  postCollection: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': {
          chain: number;
          contract: string;
        };
      };
    };
    responses: {
      /** @description Already registered */
      200: {
        headers: {
          'X-Request-Id': components['headers']['X-Request-Id'];
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CollectionMetadata'];
        };
      };
      /** @description Registered */
      201: {
        headers: {
          'X-Request-Id': components['headers']['X-Request-Id'];
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CollectionMetadata'];
        };
      };
      401: components['responses']['Unauthorized'];
    };
  };
  getCollectionStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description EVM chain id (e.g., 1 for mainnet). */
        chain: components['parameters']['ChainParam'];
        /** @description Contract address (EIP-55 or lowercased). */
        contract: components['parameters']['ContractParam'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Collection metadata */
      200: {
        headers: {
          'X-Request-Id': components['headers']['X-Request-Id'];
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CollectionMetadata'];
        };
      };
      404: components['responses']['NotFound'];
    };
  };
  headCollectionStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description EVM chain id (e.g., 1 for mainnet). */
        chain: components['parameters']['ChainParam'];
        /** @description Contract address (EIP-55 or lowercased). */
        contract: components['parameters']['ContractParam'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tracked */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not tracked */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listTokens: {
    parameters: {
      query?: {
        limit?: components['parameters']['LimitQuery'];
        cursor?: components['parameters']['CursorQuery'];
      };
      header?: never;
      path: {
        /** @description EVM chain id (e.g., 1 for mainnet). */
        chain: components['parameters']['ChainParam'];
        /** @description Contract address (EIP-55 or lowercased). */
        contract: components['parameters']['ContractParam'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Token page */
      200: {
        headers: {
          'X-Request-Id': components['headers']['X-Request-Id'];
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TokensPage'];
        };
      };
      404: components['responses']['NotFound'];
    };
  };
  getSnapshot: {
    parameters: {
      query?: {
        /** @description Comma-separated token ids to include. Omit to enumerate via /collection/tokens first. */
        token_ids?: components['parameters']['TokenIdsQuery'];
        /** @description Snapshot at this block (recommended). Mutually exclusive with at_time. */
        at_block?: components['parameters']['AtBlockQuery'];
        /** @description Snapshot at/before this ISO8601 time. Mutually exclusive with at_block. */
        at_time?: components['parameters']['AtTimeQuery'];
        limit?: components['parameters']['LimitQuery'];
        cursor?: components['parameters']['CursorQuery'];
      };
      header?: never;
      path: {
        /** @description EVM chain id (e.g., 1 for mainnet). */
        chain: components['parameters']['ChainParam'];
        /** @description Contract address (EIP-55 or lowercased). */
        contract: components['parameters']['ContractParam'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Snapshot */
      200: {
        headers: {
          'X-Request-Id': components['headers']['X-Request-Id'];
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SnapshotResponse'];
        };
      };
      404: components['responses']['NotFound'];
    };
  };
  getSnapshotCsv: {
    parameters: {
      query?: {
        at_block?: number;
      };
      header?: never;
      path: {
        chain: number;
        contract: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description CSV snapshot */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/csv': string;
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['responses']['NotFound'];
        };
      };
      /** @description Requested at_block is out of the indexed range */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Internal error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  listTokenTransfers: {
    parameters: {
      query?: {
        from_block?: components['parameters']['FromBlockQuery'];
        to_block?: components['parameters']['ToBlockQuery'];
        limit?: components['parameters']['LimitQuery'];
        cursor?: components['parameters']['CursorQuery'];
        /** @description Sort field for results. */
        order_by?: components['parameters']['OrderByQuery'];
        /** @description Sort order for results. */
        order?: components['parameters']['OrderQuery'];
      };
      header?: never;
      path: {
        /** @description EVM chain id (e.g., 1 for mainnet). */
        chain: components['parameters']['ChainParam'];
        /** @description Contract address (EIP-55 or lowercased). */
        contract: components['parameters']['ContractParam'];
        /** @description Token id (decimal or hex string). */
        token_id: components['parameters']['TokenIdParam'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Events */
      200: {
        headers: {
          'X-Request-Id': components['headers']['X-Request-Id'];
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TransfersSearchResponse'];
        };
      };
      404: components['responses']['NotFound'];
    };
  };
  getCollectionTransfers: {
    parameters: {
      query?: {
        /** @description Comma-separated `from` addresses to match. */
        from_addrs?: components['parameters']['FromAddrsQuery'];
        /** @description Comma-separated `to` addresses to match. */
        to_addrs?: components['parameters']['ToAddrsQuery'];
        /** @description Filter by monetary sale flag if known. */
        is_monetary_sale?: components['parameters']['MonetaryQuery'];
        from_block?: components['parameters']['FromBlockQuery'];
        to_block?: components['parameters']['ToBlockQuery'];
        limit?: components['parameters']['LimitQuery'];
        cursor?: components['parameters']['CursorQuery'];
        /** @description Sort field for results. */
        order_by?: components['parameters']['OrderByQuery'];
        /** @description Sort order for results. */
        order?: components['parameters']['OrderQuery'];
      };
      header?: never;
      path: {
        /** @description EVM chain id (e.g., 1 for mainnet). */
        chain: components['parameters']['ChainParam'];
        /** @description Contract address (EIP-55 or lowercased). */
        contract: components['parameters']['ContractParam'];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Matching transfers */
      200: {
        headers: {
          'X-Request-Id': components['headers']['X-Request-Id'];
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['TransfersSearchResponse'];
        };
      };
    };
  };
  getGlobalTransfers: {
    parameters: {
      query: {
        chain: number;
        from_block?: number;
        to_block?: number;
        limit?: number;
        order?: 'asc' | 'desc';
        cursor?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            chain?: number;
            safe_head_block?: number | null;
            events?: {
              chain?: number;
              contract?: string;
              token_id?: string;
              from?: string;
              to?: string;
              amount?: string;
              is_monetary_sale?: boolean | null;
              tx_hash?: string;
              block_number?: number;
              log_index?: number;
              time?: number;
            }[];
            next_cursor?: string | null;
          };
        };
      };
    };
  };
}
