name: Deploy a service

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment'
        required: true
        default: staging
        options:
          - staging
          - prod
      service:
        type: choice
        description: 'Service'
        required: true
        default: api
        options:
          - api
          - aggregatedActivityLoop
          - cloudwatchAlarmsToDiscordLoop
          - customReplayLoop
          - dbMigrationsLoop
          - delegationsLoop
          - discoverEnsLoop
          - ethPriceLoop
          - marketStatsLoop
          - mediaResizerLoop
          - memeLabLoop
          - nextgenContractLoop
          - nextgenMediaImageResolutions
          - nextgenMediaProxyInterceptor
          - nextgenMediaUploader
          - nextgenMetadataLoop
          - nftHistoryLoop
          - nftOwnersLoop
          - nftsLoop
          - overRatesRevocationLoop
          - ownersBalancesLoop
          - rateEventProcessingLoop
          - refreshEnsLoop
          - rememesLoop
          - royaltiesLoop
          - s3Loop
          - tdhConsolidationsLoop
          - tdhHistoryLoop
          - tdhLoop
          - teamLoop
          - transactionsLoop
          - transactionsProcessingLoop

env:
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

run-name: Deploy ${{ github.event.inputs.service }} to ${{ github.event.inputs.environment }}

jobs:
  build-and-deploy:
    name: Build and deploy ${{ github.event.inputs.service }} to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Check preconditions
        uses: actions/github-script@v3
        if: (github.event.inputs.service == 'mediaResizerLoop' || github.event.inputs.service == 'nextgenMediaProxyInterceptor' || github.event.inputs.service == 'nextgenMediaUploader' || github.event.inputs.service == 'nextgenMediaImageResolutions' || github.event.inputs.service == 'cloudwatchAlarmsToDiscordLoop') && github.event.inputs.environment != 'prod'
        with:
          script: core.setFailed('Given service can only be deployed to production environment')
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}
      - name: Install root dependencies
        run: npm i
      - name: Install lambda dependencies
        if: github.event.inputs.service != 'api'
        run: npm i && pushd src/${{ github.event.inputs.service }} && npm i && popd
      - name: Install api dependencies
        if: github.event.inputs.service == 'api'
        run: pushd src/api-serverless && npm i && popd
      - name: Build service
        if: github.event.inputs.service != 'api'
        run: pushd src/${{ github.event.inputs.service }} && npm run build && popd
      - name: Build API
        if: github.event.inputs.service == 'api'
        run: pushd src/api-serverless && npm run build && popd
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.environment == 'prod' && 'us-east-1' || 'eu-west-1' }}
      - name: Deploy service
        if: github.event.inputs.service != 'api' && github.event.inputs.service != 'nextgenMediaProxyInterceptor' && github.event.inputs.service != 'mediaResizerLoop'
        run: |
          export VERSION_DESCRIPTION="$(date) - $(git rev-parse --abbrev-ref HEAD) - $(git show -s --format=%s)"
          pushd src/${{ github.event.inputs.service }} && npm run sls-deploy:${{ github.event.inputs.environment }} && popd
      - name: Deploy API
        if: github.event.inputs.service == 'api'
        run: |
          aws lambda update-function-code --function-name  seizeAPI --zip-file fileb://src/api-serverless/dist/index.zip
          sleep 10
          aws lambda update-function-configuration --function-name seizeAPI --description "$(date) - $(git rev-parse --abbrev-ref HEAD) - $(git show -s --format=%s)"
      - name: Deploy mediaResizerLoop
        if: github.event.inputs.service == 'mediaResizerLoop'
        run: |
          aws lambda update-function-code --function-name  mediaResizerLoop --zip-file fileb://src/mediaResizerLoop/dist/index.zip
          sleep 10
          aws lambda update-function-configuration --function-name mediaResizerLoop --description "$(date) - $(git rev-parse --abbrev-ref HEAD) - $(git show -s --format=%s)"
      - name: Deploy nextgenMediaProxyInterceptor
        if: github.event.inputs.service == 'nextgenMediaProxyInterceptor'
        run: |
          pushd src/nextgenMediaProxyInterceptor
          sh deploy.sh
          popd
      - name: Run lambda
        if: github.event.inputs.service == 'dbMigrationsLoop'
        run: sleep 10 && aws lambda invoke --function-name dbMigrationsLoop out > /dev/null
      - name: Notify about failure
        uses: sarisia/actions-status-discord@v1
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          title: Seize-Lambda ${{ github.event.inputs.environment }} ${{ github.event.inputs.service }} DEPLOY CI pipeline is broken!!!
          content: '@everyone'
          color: 0xff0000

      - name: Notify about success
        uses: sarisia/actions-status-discord@v1
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          title: Seize-Lambda ${{ github.event.inputs.environment }} ${{ github.event.inputs.service }} DEPLOY CI pipeline complete
          color: 0x00ff00
